.if n .ds lq ""
.if n .ds rq ""
.if t .ds lq ``
.if t .ds rq ''
.de QU
\&\\*(lq\\$1\\*(rq\\$2
..
.TH HP 1 "15 March 2016"
.SH NAME
hp \- Reverse Polish Notation calculator
.SH SYNOPSIS
.B hp
[
.I "expression elements"
]
.SH DESCRIPTION
.I Hp
is a desk calculator program using the Reverse Polish Notation
familiar to all stack machine aficionados and users of
Hewlett-Packard calculators.
It accepts expressions composed of operands and operators from
either its argument list or standard input and evaluates them.
.PP
If the expressions to be evaluated are given on the command line,
.I hp
prints the resulting value automatically;
otherwise, the user must request printing with the
.QU "p"
or
.QU "P"
commands.
.PP
An acceptable expression consists of a sequence of
.QU "constants"
and
.QU "commands."
Constants are numeric constants written in the style of FORTRAN,
and are stored internally as double precision floating-point values.
Commands are single characters that request an arithmetic, stack
control, or control flow operation.
The following commands are currently implemented:
.TP
.B p
print the value on the top of the stack.
.TP
.B P
print all the values currently on the stack.
.TP
.B d
delete the top value on the stack (throw it away).
.TP
.B D
empty the stack completely (throw all stacked data away).
.TP
.B +
add top two items on the stack, place sum on the stack.
.TP
.B \-
subtract top of stack from next to top, place difference on the stack.
.TP
.BR * " or " x " or " X
multiply top two items on the stack, place product on the stack.
Since
.QU "*"
is usually expanded by the shell,
.I hp
allows
.QU x
or
.QU X
as synonyms for
.QU * .
(The idea is that
.QU x
is hopefully reminiscent of the grade-school notation used for multiplication.)
.TP
.B /
divide next to top of stack by top of stack, place quotient on the stack.
.TP
.B %
divide next to top of stack by top of stack, place remainder on the stack.
.TP
.BR ^ " or " :
evaluate (next to top of stack) to the (top of stack) power, place
result on the stack.
The
.QU : ,
while not very mnemonic, is not special to the Bourne shell
.RI ( sh (1)),
and so can be used
on the command line.
.TP
.B @
Change the sign of the item on the top of the stack.
.TP
.B =
if next to top of stack equals top of stack, place a 1 on the stack;
otherwise, place a 0 on the stack.
.TP
.B <
if next to top of stack is less than top of stack, place a 1 on the
stack; otherwise, place a 0 on the stack.
.TP
.B <=
if next to top of stack is less than or equal to top of stack, place a 1 on the
stack; otherwise, place a 0 on the stack.
.TP
.B >
if next to top of stack is greater than top of stack, place a 1 on the
stack; otherwise, place a 0 on the stack.
.TP
.B >=
if next to top of stack is less than or greater to top of stack,
place a 1 on the
stack; otherwise, place a 0 on the stack.
.TP
.B &
if next to top of stack is nonzero and top of stack is nonzero, place
a 1 on the stack; otherwise, place a 0 on the stack.
.TP
.B |
if next to top of stack is nonzero or top of stack is nonzero,
place a 1 on the stack; otherwise, place a 0 on the stack.
.TP
.B !
if top of stack is nonzero, replace it with a 0; if it is zero,
replace it with a 1 (logical negation).
.TP
.BR q " or " Q
exit.
.I Hp
will also exit when it sees an end-of-file (usually control-D).
.SH EXAMPLES
.nf
.ft CW
$ \f(CBhp 32.75 4.5 '*'\fP
147.375
$ \f(CBhp\fP
\f(CB1 2 3 4 5 6 7P++++++pd\fP
1.000000
2.000000
3.000000
4.000000
5.000000
6.000000
28.000000
\f(CB3.1416 2.7183^ 2.7183 3.1416^>p\fP
0.000000
.fi
.ft R
.SH SEE ALSO
.IR eval (1),
.IR yacc (1)
.SH DIAGNOSTICS
.TP
\f(CWstack overflow\fR
if an attempt is made to push too many items on the stack.
The stack size is currently limited to about 100.
.TP
\f(CWstack underflow\fR
if an attempt is made to perform an operation
with insufficient operands on the stack.
.TP
\f(CIchar\f(CW: unrecognized command\fR
if a character not corresponding to
any command appears in an expression.
.SH CREDITS
.PP
The original version of
.I hp
was developed in Ratfor and STACC for the Georgia Tech Software Tools Subsystem
on Pr1me computers, sometime in the early 1980s, most likely by one or more of
Dan Forsyth,
Perry Flynn,
and
Allen Aiken.
Arnold Robbins
ported it to C,
.IR yacc ,
and
.I lex
on Unix circa 1985. Arnold finally
posted it to USENET in 1991.
In March of 1998, he replaced the
.I lex
scanner with a hand-written version to avoid
the headaches\h'-\w'headaches'u'\v'-.25'\l'\w'headaches'u'\v'.25', er,
.IR complexity ,
of
.IR flex .
It then remained largely untouched
until June of 2005, when he reworked this manual page.
In April of 2015, Arnold uploaded it to Github, with as full
a history as he could reconstruct.
